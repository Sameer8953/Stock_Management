/*
Today  I Discuss to DTOs Concept..
Response Vs Request..
Request to design:

        Response 
        {
            username: "testdem", 
            --------------------------> DTO ---> { username : test }
            password : "ABC#321"                     
       
        }

        Request

            [Required]
            public Password {get; set;}

DTOs : ModelClass -> DTOsClass(Propertities are same in modelClass) -> MappersClass -> then Controllers....
POST (Create Functions):

        [HttpPost]
        public IActionResult Create([FromBody] CreateStockRequestDto stockDto)
        {
            var stockModel = stockDto.ToStockFromCreateDTo();
            _context.Stocks.Add(stockModel);
            _context.SaveChanges();
            return CreatedAtAction(nameof(GetById), new {id = stockModel.Id},stockModel.ToStockDto());
        }

 PUT : (UPDATE Functions) :

         [HttpPut]
        [Route("{id}")]
        public IActionResult Update([FromRoute] int id, [FromBody] UpdateStockRequestDto updateDto) 
        {
            var stockModel = _context.Stocks.FirstOrDefault(x=>x.Id == id);
            if(stockModel == null)
            {
                return NotFound();
            }

            stockModel.Symbol = updateDto.Symbol;
            stockModel.CompanyName = updateDto.CompanyName;
            stockModel.Purchase = updateDto.Purchase;
            stockModel.LastDiv = updateDto.LastDiv;
            stockModel.Industry = updateDto.Industry;
            stockModel.MarketCap = updateDto.MarketCap;

            _context.SaveChanges();
            return Ok(stockModel.ToStockDto());

        }
DELETE(Delete Functions) :

    [HttpDelete]
        [Route("{id}")]
        public IActionResult Delete([FromRoute] int id)
        {
            var stockModel = _context.Stocks.FirstOrDefault(x=>x.Id == id);

            if (stockModel == null)
            {
                return NotFound();
            }

            _context.Stocks.Remove(stockModel);

            _context.SaveChanges();

            return NoContent();
        }

Async Task Await.(Functions CRUD)

     public StockController(ILogger<StockController> logger , ApplicationDBContext context)
        {
            _logger = logger;
            _context = context;
        }

        [HttpGet]
        public async Task<IActionResult> GetAll()
        {
            var stocks = await _context.Stocks.ToListAsync();
            var stockDto = stocks .Select(s=>s.ToStockDto());
            return Ok(stocks);
        }

        [HttpGet("{id}")]
        public async Task<IActionResult> GetById([FromRoute] int id)
        {
            var stock = await _context.Stocks.FindAsync(id);
            if(stock == null)
            {
                return NotFound("Data Not Found !");
            }
            return Ok(stock.ToStockDto());
        }

        [HttpPost]
        public async Task<IActionResult> Create([FromBody] CreateStockRequestDto stockDto)
        {
            var stockModel = stockDto.ToStockFromCreateDTo();
           await _context.Stocks.AddAsync(stockModel);
           await _context.SaveChangesAsync();
            return CreatedAtAction(nameof(GetById), new {id = stockModel.Id},stockModel.ToStockDto());
        }

        [HttpPut]
        [Route("{id}")]
        public async Task<IActionResult> Update([FromRoute] int id, [FromBody] UpdateStockRequestDto updateDto) 
        {
            var stockModel = await _context.Stocks.FirstOrDefaultAsync(x=>x.Id == id);
            if(stockModel == null)
            {
                return NotFound();
            }

            stockModel.Symbol = updateDto.Symbol;
            stockModel.CompanyName = updateDto.CompanyName;
            stockModel.Purchase = updateDto.Purchase;
            stockModel.LastDiv = updateDto.LastDiv;
            stockModel.Industry = updateDto.Industry;
            stockModel.MarketCap = updateDto.MarketCap;

            await _context.SaveChangesAsync();
            return Ok(stockModel.ToStockDto());

        }

        [HttpDelete]
        [Route("{id}")]
        public async Task<IActionResult> Delete([FromRoute] int id)
        {
            var stockModel = await _context.Stocks.FirstOrDefaultAsync(x=>x.Id == id);

            if (stockModel == null)
            {
                return NotFound();
            }

            _context.Stocks.Remove(stockModel);

           await _context.SaveChangesAsync();

            return NoContent();

        }
    }


Next Topic to Discuss : Repository(Repo) and Dependency Injection(DI)
    1- create Folder Interfaces  and  Repository  

Interfaces :
             public interface IStockRepository
             {
                
                 Task<List<Stock>> GetAllAsync();
                 Task<Stock?> GetByIdAsync(int id);
                 Task<Stock> CreateAsync(Stock stockModel);
                 Task<Stock?> UpdateAsync(int id, UpdateStockRequestDto stockDto);
                 Task<Stock?> DeleteAsync(int id);
            }
                    
    2- Implementation to Interfaces to contract Servicess Classes

Services :

        public class StockRepository : IStockRepository
    {
        private readonly ApplicationDBContext _context;
       
        public StockRepository(ApplicationDBContext context)
        {
            _context = context;  
        }

        public async Task<List<Stock>> GetAllAsync()
        {
           return  await _context.Stocks.ToListAsync();
        }

        public async Task<Stock?> GetByIdAsync(int id)
        {
            return await _context.Stocks.FindAsync(id);
        }

        public async Task<Stock> CreateAsync(Stock stockModel)
        {
            await _context.Stocks.AddAsync(stockModel);
            await _context.SaveChangesAsync();
            return stockModel;
        }

        public async Task<Stock?> UpdateAsync(int id, UpdateStockRequestDto stockDto)
        {
            var existingStock = await _context.Stocks.FirstOrDefaultAsync(x => x.Id == id);

            if (existingStock == null)
            {
                return null;
            }

            existingStock.Symbol = stockDto.Symbol;
            existingStock.CompanyName = stockDto.CompanyName;
            existingStock.Purchase = stockDto.Purchase;
            existingStock.LastDiv = stockDto.LastDiv;
            existingStock.Industry = stockDto.Industry;
            existingStock.MarketCap = stockDto.MarketCap;

            await _context.SaveChangesAsync();

            return existingStock;
        }

        public async Task<Stock?> DeleteAsync(int id)
        {
            var stockModel = await _context.Stocks.FirstOrDefaultAsync(x =>x.Id == id);

            if (stockModel == null)
            {
                return null;
            }

            _context.Stocks.Remove(stockModel);
            await _context.SaveChangesAsync();
            return stockModel;
        } 
    }


    3- Programg.cs  : Add Services to Interfaces into Repositor
Add Services : 
                builder.Services.AddTransient<IStockRepository,StockRepository>();

Controllers CRUD Opreation Logic :
    A- HttpGet : (GetAll , GetById)
    B- HttpPost : (Create , Insert)
    C- HttpPut : (UPDATE , Edit)
    D- HttpDelete : (Delete , Remove)




                   

*/